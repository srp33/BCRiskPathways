#!/bin/bash

source scripts/create_temp_files

mkdir -p raw raw/utah raw/ontario1 raw/ontario2 normalization/utah normalization/ontario1 normalization/ontario2 summarization/utah summarization/ontario1 summarization/ontario2 matrices misc genesets

# Specify meta files
exonPlanDbAffyFile=library/HuEx-1_0.green.flat
exonAffyProbeTabFile=library/HuEx-1_0-st-v2.probe.tab
exonAffyFullProbesFile=library/HuEx-1.0.full.probes.txt

exonGeneProbeFile=library/HuEx-1.0.gene_probe.txt
exonGreenProbesFile=library/HuEx-1.0.green.probes.txt

# Parse Affy meta files to generate secondary meta files
python code/ParseProbesFromPlanDbAffyFile.py $exonPlanDbAffyFile False False $exonGreenProbesFile
python code/MatchKeysWithValues.py $exonPlanDbAffyFile 13 0 $exonGeneProbeFile

# These were required for the GEO submission
python code/Create_Pgf_Mps_Clf_Files.py $exonGeneProbeFile $exonAffyProbeTabFile library/HuEx-1_0-st-v2.hg18.custom.pgf library/HuEx-1_0-st-v2.hg18.custom.mps library/HuEx-1_0-st-v2.hg18.custom.clf

# Parse gene information from external database files
python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,2 library/Entrez_gene_symbols.txt
python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,4 library/Entrez_gene_synonyms.txt
python code/SelectColumns.py library/Entrez_Homo_sapiens.gene_info.txt 1,8 library/Entrez_gene_names.txt

# Parse pathway files
rm -f genesets/*
cp -v library/*gene.ids.txt genesets/
python code/ParseEntrezGeneIDsForKeggPathways.py library/kegg_hsa_pathways.txt library/kegg_hsa_gene_pathway.txt library/kegg_hsa_entrezgene.txt genesets/KEGG_{PATHWAY_NAME}.gene.ids.txt
python code/SplitGmtToGeneSetFiles.py library/c2.cp.v3.0.entrez.gmt KEGG "genesets/{PATHWAY_NAME}.gene.ids.txt"
python code/MergeGeneIDFilesIntoGmt.py "genesets/*" library/all_pathways.gmt
python code/SelectColumns.py library/all_pathways.gmt 0 $tmpFile1
sort $tmpFile1 > library/all_pathways.txt

# Create class files
python code/CreateClassFile.py clinical/family.txt 0 1 "Control=2,4;BRCACancer=3,5" clinical/classes.24vs35.txt
python code/CreateClassFile.py clinical/family.txt 0 1 "Control=0,1,2,4;BRCACancer=3,5" clinical/classes.0124vs35.txt
python code/CreateClassFile.py clinical/family.txt 0 1 "BRCAXControl=2;BRCAControl=4" clinical/classes.2vs4.txt
python code/CreateClassFile.py clinical/family.txt 0 1 "BRCAXCancer=3;BRCACancer=5" clinical/classes.3vs5.txt
python code/CreateClassFile.py clinical/family.txt 0 1 "BRCAXControl=2;BRCAXCancer=3" clinical/classes.2vs3.txt
python code/CreateClassFile.py clinical/family.txt 0 1 "BRCAControl=4;BRCACancer=5" clinical/classes.4vs5.txt

python code/FilterFile.py clinical/classes.24vs35.txt "x[0].startswith('Utah__')" 0 clinical/utah.24vs35.txt
python code/FilterFile.py clinical/classes.24vs35.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.24vs35.txt
python code/FilterFile.py clinical/classes.0124vs35.txt "x[0].startswith('Utah__')" 0 clinical/utah.0124vs35.txt
python code/FilterFile.py clinical/classes.0124vs35.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.0124vs35.txt
python code/FilterFile.py clinical/classes.2vs4.txt "x[0].startswith('Utah__')" 0 clinical/utah.2vs4.txt
python code/FilterFile.py clinical/classes.2vs4.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.2vs4.txt
python code/FilterFile.py clinical/classes.3vs5.txt "x[0].startswith('Utah__')" 0 clinical/utah.3vs5.txt
python code/FilterFile.py clinical/classes.3vs5.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.3vs5.txt
python code/FilterFile.py clinical/classes.2vs3.txt "x[0].startswith('Utah__')" 0 clinical/utah.2vs3.txt
python code/FilterFile.py clinical/classes.2vs3.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.2vs3.txt
python code/FilterFile.py clinical/classes.4vs5.txt "x[0].startswith('Utah__')" 0 clinical/utah.4vs5.txt
python code/FilterFile.py clinical/classes.4vs5.txt "x[0].startswith('Ontario__')" 0 clinical/ontario.4vs5.txt

# Create sample files
rm -f ML-Flex2/Experiments/*samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['2','3','4','5']" 0 ML-Flex2/Experiments/24vs35.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] or x[1] in ['0','1']" 0 ML-Flex2/Experiments/24vs35.test.samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0]" 0 ML-Flex2/Experiments/0124vs35.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0]" 0 ML-Flex2/Experiments/0124vs35.test.samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['2','4']" 0 ML-Flex2/Experiments/2vs4.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] and x[1] in ['2','4']" 0 ML-Flex2/Experiments/2vs4.test.samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['3','5']" 0 ML-Flex2/Experiments/3vs5.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] and x[1] in ['3','5']" 0 ML-Flex2/Experiments/3vs5.test.samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['2','3']" 0 ML-Flex2/Experiments/2vs3.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] and x[1] in ['2','3']" 0 ML-Flex2/Experiments/2vs3.test.samples.txt
python code/FilterFile.py clinical/family.txt "'Utah__' in x[0] and x[1] in ['4','5']" 0 ML-Flex2/Experiments/4vs5.training.samples.txt
python code/FilterFile.py clinical/family.txt "'Ontario__' in x[0] and x[1] in ['4','5']" 0 ML-Flex2/Experiments/4vs5.test.samples.txt
for f in ML-Flex2/Experiments/*samples.txt
do
  python code/SelectColumns.py $f 0 $tmpFile1
  cp $tmpFile1 $f
done

# Normalize CEL files
scripts/normalizeDir utah $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile
scripts/normalizeDir ontario1 $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile
scripts/normalizeDir ontario2 $exonAffyProbeTabFile "0/2/3/9" $exonAffyFullProbesFile
scripts/normalizeDir Bellacosa_Breast library/HG-U133_Plus_2.probe_tab "6/1/2/4/3" None

# Summarize data at gene level
scripts/summarizeNormDir .norm.txt utah 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None
scripts/summarizeNormDir .norm.txt ontario1 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None
scripts/summarizeNormDir .norm.txt ontario2 1 expr green gene $exonGeneProbeFile $exonGreenProbesFile 5 calculateTrimmedMean None
scripts/summarizeNormDir .norm.txt Bellacosa_Breast 1 expr green gene library/HG-U133_Plus2.gene_probe.txt library/HG-U133_Plus2.green.probes.txt 5 calculateTrimmedMean None

# Create matrix files with summarized data
python code/BuildMatrixFile.py summarization/utah/ .gene.green.expr.txt None 1 Utah__ matrices/utah.expr.txt
python code/BuildMatrixFile.py summarization/ontario1/ .gene.green.expr.txt None 1 Ontario__ matrices/ontario1.expr.txt
python code/BuildMatrixFile.py summarization/ontario2/ .gene.green.expr.txt None 1 Ontario__ matrices/ontario2.expr.txt
python code/BuildMatrixFile.py summarization/Bellacosa_Breast/ .gene.green.expr.txt None 1 "" matrices/Bellacosa.txt

# Build matrix files for Utah and Ontario
for validationCohort in ontario1 ontario2
do
 # Batch adjust data
  python code/MergeMatrixOnRowNames.py matrices/utah.expr.txt matrices/${validationCohort}.expr.txt matrices/utah${validationCohort}.expr.txt
  cd matrices
  Rscript --vanilla ../code/BatchAdjust.R ../code/ComBat.R utah${validationCohort}.expr.txt ../clinical/BatchInfo.Study.txt utah${validationCohort}.batch.txt
  cd ..

  # Remove genes that are associated with epi/blood variables
  Rscript --vanilla code/EpiBloodFiltering.R clinical/blood.txt secure/epidemiologic.txt matrices/utah${validationCohort}.batch.txt misc/utah${validationCohort}.epiblood.keep.txt misc/utah${validationCohort}.epiblood.filter.txt
  python code/FilterFileByColumnValues.py matrices/utah${validationCohort}.batch.txt 0 misc/utah${validationCohort}.epiblood.keep.txt 1 $tmpFile1
  cp $tmpFile1 matrices/utah${validationCohort}.batch.txt

  # Create ARFF file for pathway gene sets
  mkdir -p ML-Flex2/InputData/2vs4 ML-Flex2/InputData/3vs5 ML-Flex2/InputData/2vs3 ML-Flex2/InputData/4vs5

  allDataProcessorsText=
  allDataProcessorsText2vs4=
  allDataProcessorsText3vs5=
  allDataProcessorsText2vs3=
  allDataProcessorsText4vs5=
  for pathwayFile in genesets/*.gene.ids.txt
  do
    pathway=`basename $pathwayFile`
    pathway=${pathway/\.gene\.ids\.txt/}

    echo Creating ARFF for $pathway for $validationCohort
    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.0124vs35.txt ML-Flex2/InputData/utah${validationCohort}.batch.$pathway.arff
    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.2vs4.txt ML-Flex2/InputData/2vs4/utah${validationCohort}.batch.$pathway.arff
    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.3vs5.txt ML-Flex2/InputData/3vs5/utah${validationCohort}.batch.$pathway.arff
    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.2vs3.txt ML-Flex2/InputData/2vs3/utah${validationCohort}.batch.$pathway.arff
    scripts/createArffForGeneList matrices/utah${validationCohort}.batch.txt genesets/$pathway.gene.ids.txt clinical/classes.4vs5.txt ML-Flex2/InputData/4vs5/utah${validationCohort}.batch.$pathway.arff

    dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/utah${validationCohort}.batch.$pathway.arff\")"
    dataProcessorText2vs4="mlflex.dataprocessors.ArffDataProcessor(\"InputData/2vs4/utah${validationCohort}.batch.$pathway.arff\")"
    dataProcessorText3vs5="mlflex.dataprocessors.ArffDataProcessor(\"InputData/3vs5/utah${validationCohort}.batch.$pathway.arff\")"
    dataProcessorText2vs3="mlflex.dataprocessors.ArffDataProcessor(\"InputData/2vs3/utah${validationCohort}.batch.$pathway.arff\")"
    dataProcessorText4vs5="mlflex.dataprocessors.ArffDataProcessor(\"InputData/4vs5/utah${validationCohort}.batch.$pathway.arff\")"

    if [ "$allDataProcessorsText" == "" ]
    then
      allDataProcessorsText="$dataProcessorText"
      allDataProcessorsText2vs4="$dataProcessorText2vs4"
      allDataProcessorsText3vs5="$dataProcessorText3vs5"
      allDataProcessorsText2vs3="$dataProcessorText2vs3"
      allDataProcessorsText4vs5="$dataProcessorText4vs5"
    else
      allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
      allDataProcessorsText2vs4="$allDataProcessorsText2vs4;$dataProcessorText2vs4"
      allDataProcessorsText3vs5="$allDataProcessorsText3vs5;$dataProcessorText3vs5"
      allDataProcessorsText2vs3="$allDataProcessorsText2vs3;$dataProcessorText2vs3"
      allDataProcessorsText4vs5="$allDataProcessorsText4vs5;$dataProcessorText4vs5"
    fi
  done

  comparison=24vs35
  python code/ReplaceText.py ML-Flex2/Experiments/Pathways_Template.txt "{processors}" "$allDataProcessorsText" ML-Flex2/Experiments/utah${validationCohort}_Pathways_24vs35.txt
  python code/ReplaceText.py ML-Flex2/Experiments/utah${validationCohort}_Pathways_24vs35.txt "{comparison}" "$comparison" ML-Flex2/Experiments/utah${validationCohort}_Pathways_24vs35.txt

  python code/ReplaceText.py ML-Flex2/Experiments/Pathways_Template.txt "{processors}" "$allDataProcessorsText2vs4" ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs4.txt
  python code/ReplaceText.py ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs4.txt "{comparison}" "2vs4" ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs4.txt
  python code/ReplaceText.py ML-Flex2/Experiments/Pathways_Template.txt "{processors}" "$allDataProcessorsText3vs5" ML-Flex2/Experiments/utah${validationCohort}_Pathways_3vs5.txt
  python code/ReplaceText.py ML-Flex2/Experiments/utah${validationCohort}_Pathways_3vs5.txt "{comparison}" "3vs5" ML-Flex2/Experiments/utah${validationCohort}_Pathways_3vs5.txt
  python code/ReplaceText.py ML-Flex2/Experiments/Pathways_Template.txt "{processors}" "$allDataProcessorsText2vs3" ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs3.txt
  python code/ReplaceText.py ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs3.txt "{comparison}" "2vs3" ML-Flex2/Experiments/utah${validationCohort}_Pathways_2vs3.txt
  python code/ReplaceText.py ML-Flex2/Experiments/Pathways_Template.txt "{processors}" "$allDataProcessorsText4vs5" ML-Flex2/Experiments/utah${validationCohort}_Pathways_4vs5.txt
  python code/ReplaceText.py ML-Flex2/Experiments/utah${validationCohort}_Pathways_4vs5.txt "{comparison}" "4vs5" ML-Flex2/Experiments/utah${validationCohort}_Pathways_4vs5.txt
done

# Build Arff files for Lim, et al. (Visvader)
python code/CreateArff.py None clinical/Visvader.Control_vs_BRCA.classes.txt None True ML-Flex2/InputData/Visvader.classes.arff

allDataProcessorsText=
for pathwayFile in genesets/*.gene.ids.txt
do
  pathway=`basename $pathwayFile`
  pathway=${pathway/\.gene\.ids\.txt/}
  echo Creating data file for $pathway for Visvader

  scripts/createArffForGeneList matrices/Visvader.txt genesets/$pathway.gene.ids.txt clinical/Visvader.Control_vs_BRCA.classes.txt ML-Flex2/InputData/Visvader.$pathway.arff

  dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/Visvader.$pathway.arff\")"

  if [ "$allDataProcessorsText" == "" ]
  then
    allDataProcessorsText="$dataProcessorText"
  else
    allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
  fi
done

python code/ReplaceText.py ML-Flex2/Experiments/Visvader_Pathways.txt "{processors}" "$allDataProcessorsText" ML-Flex2/Experiments/Visvader_Pathways.txt

allDataProcessorsText=
for pathwayFile in genesets/*.gene.ids.txt
do
  pathway=`basename $pathwayFile`
  pathway=${pathway/\.gene\.ids\.txt/}
  echo Creating data file for $pathway for Bellacosa

  scripts/createArffForGeneList matrices/Bellacosa.txt genesets/$pathway.gene.ids.txt clinical/Bellacosa.classes.txt ML-Flex2/InputData/Bellacosa.$pathway.arff

  dataProcessorText="mlflex.dataprocessors.ArffDataProcessor(\"InputData/Bellacosa.$pathway.arff\")"

  if [ "$allDataProcessorsText" == "" ]
  then
    allDataProcessorsText="$dataProcessorText"
  else
    allDataProcessorsText="$allDataProcessorsText;$dataProcessorText"
  fi
done

python code/ReplaceText.py ML-Flex2/Experiments/Bellacosa_Pathways.txt "{processors}" "$allDataProcessorsText" ML-Flex2/Experiments/Bellacosa_Pathways.txt
